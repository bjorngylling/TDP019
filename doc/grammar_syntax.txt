statement_list ::= [ [statement ] statement_terminator ]+

statement_terminator ::= "\n" | ";"

statement ::= return_statement | 
              print_statement |
			  			compound_statement |
              expression              

return_statement ::= "return" expression

print_statement ::= "print" expression
              
compound_statement ::= if_statement |
                       while_statement |
                       function_def
                       
block_start ::= "{"

block_end ::= "}"

if_statement ::= "if" "(" expression ")" block_start statement_list block_end 
                 "else" block_start statement_list block_end |
                 "if" "(" expression ")" block_start statement_list block_end

while_statement ::= "while" "(" expression ")" block_start statement_list block_end

function_def ::= "def" identifier parameters block_start statement_list block_end

parameters ::= "(" parameter_list ")" |
               "(" ")"

parameter_list ::= [identifier ","]* identifier

function_call ::= identifier arguments

arguments ::= "(" expression_list ")" |
              "(" ")"
              
expression_list ::= [expression ","]* expression

expression ::= assignment_expression |
				       comparison

comparison ::= [a_expr comp_operator]* a_expr

a_expr ::= [m_expr ["+" | "-"]]* m_expr

m_expr ::= [u_expr ["*" | "/"]]* u_expr

u_expr ::= ["+" | "-"]? primary

primary ::= function_call |
            boolean |
            number |
            string |
            indentifier
            
comp_operator ::= "==" | "<=" | ">=" | ">" | "<" | "!="

assignment_expression ::= identifier "=" expression

number ::= integer | float

integer ::= digits
              
digits ::= digit+

float ::= [ digits ] "." digits

